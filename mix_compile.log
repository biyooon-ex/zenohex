Compiling 3 files (.ex)
Compiling crate zenohex_nif in release mode (native/zenohex_nif)
   Compiling zenohex_nif v0.3.2 (/Users/takasehideki/research/zenoh/zenohex/native/zenohex_nif)
error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> src/publisher.rs:53:50
    |
53  |     let publisher: Publisher = publisher.clone().congestion_control(value.into());
    |                                                  ^^^^^^^^^^^^^^^^^^ ------------ unexpected argument
    |
note: method defined here
   --> /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-1.0.0/src/api/publisher.rs:153:12
    |
153 |     pub fn congestion_control(&self) -> CongestionControl {
    |            ^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
53  -     let publisher: Publisher = publisher.clone().congestion_control(value.into());
53  +     let publisher: Publisher = publisher.clone().congestion_control();
    |

error[E0308]: mismatched types
  --> src/publisher.rs:53:32
   |
53 |     let publisher: Publisher = publisher.clone().congestion_control(value.into());
   |                    ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Publisher<'_>`, found `CongestionControl`
   |                    |
   |                    expected due to this

error[E0061]: this method takes 0 arguments but 1 argument was supplied
   --> src/publisher.rs:64:50
    |
64  |     let publisher: Publisher = publisher.clone().priority(value.into());
    |                                                  ^^^^^^^^ ------------ unexpected argument
    |
note: method defined here
   --> /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-1.0.0/src/api/publisher.rs:159:12
    |
159 |     pub fn priority(&self) -> Priority {
    |            ^^^^^^^^
help: remove the extra argument
    |
64  -     let publisher: Publisher = publisher.clone().priority(value.into());
64  +     let publisher: Publisher = publisher.clone().priority();
    |

error[E0308]: mismatched types
  --> src/publisher.rs:64:32
   |
64 |     let publisher: Publisher = publisher.clone().priority(value.into());
   |                    ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Publisher<'_>`, found `Priority`
   |                    |
   |                    expected due to this

error[E0308]: mismatched types
  --> src/query.rs:22:81
   |
22 |                 Some(value) => ErlOption::some(crate::value::ExValue::from(env, value)),
   |                                                ---------------------------      ^^^^^ expected `&Sample`, found `&ZBytes`
   |                                                |
   |                                                arguments to this function are incorrect
   |
   = note: expected reference `&Sample`
              found reference `&ZBytes`
note: associated function defined here
  --> src/value.rs:10:19
   |
10 |     pub(crate) fn from<'a>(env: Env<'a>, value: &zenoh::sample::Sample) -> Term<'a> {
   |                   ^^^^                   -----------------------------

error[E0277]: the trait bound `KeyExpr<'_>: From<Result<Sample, _>>` is not satisfied
  --> src/query.rs:56:17
   |
56 |     match query.reply(Ok(sample)).wait() {
   |                 ^^^^^ the trait `From<Result<Sample, _>>` is not implemented for `KeyExpr<'_>`, which is required by `KeyExpr<'_>: TryFrom<Result<Sample, _>>`
   |
   = help: the following other types implement trait `From<T>`:
             `KeyExpr<'a>` implements `From<&'a KeyExpr<'a>>`
             `KeyExpr<'a>` implements `From<&'a OwnedKeyExpr>`
             `KeyExpr<'a>` implements `From<&'a zenoh::key_expr::keyexpr>`
             `KeyExpr<'a>` implements `From<OwnedKeyExpr>`
   = note: required for `Result<Sample, _>` to implement `Into<KeyExpr<'_>>`
   = note: required for `KeyExpr<'_>` to implement `TryFrom<Result<Sample, _>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> src/query.rs:56:17
    |
56  |     match query.reply(Ok(sample)).wait() {
    |                 ^^^^^------------ argument #2 is missing
    |
note: method defined here
   --> /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-1.0.0/src/api/queryable.rs:148:12
    |
148 |     pub fn reply<'b, TryIntoKeyExpr, IntoZBytes>(
    |            ^^^^^
help: provide the argument
    |
56  |     match query.reply(Ok(sample), /* payload */).wait() {
    |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `wait` found for struct `ReplyBuilder` in the current scope
  --> src/query.rs:56:35
   |
56 |     match query.reply(Ok(sample)).wait() {
   |                                   ^^^^ method not found in `ReplyBuilder<'_, '_, ReplyBuilderPut>`
   |
  ::: /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-core-1.0.1/src/lib.rs:54:8
   |
54 |     fn wait(self) -> Self::To;
   |        ---- the method is available for `ReplyBuilder<'_, '_, ReplyBuilderPut>` here
   |
   = help: items from traits can only be used if the trait is in scope
help: trait `Wait` which provides `wait` is implemented but not in scope; perhaps you want to import it
   |
1  + use zenoh::Wait;
   |

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> src/queryable.rs:15:21
    |
15  |     let queryable: &Queryable<'_, Receiver<Query>> = &resource.0;
    |                     ^^^^^^^^^ -- help: remove the lifetime argument
    |                     |
    |                     expected 0 lifetime arguments
    |
note: struct defined here, with 0 lifetime parameters
   --> /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-1.0.0/src/api/queryable.rs:420:12
    |
420 | pub struct Queryable<Handler> {
    |            ^^^^^^^^^

error[E0616]: field `key_expr` of struct `Sample` is private
  --> src/sample.rs:17:30
   |
17 |             key_expr: sample.key_expr.to_string(),
   |                              ^^^^^^^^ private field
   |
help: a method `key_expr` also exists, call it with parentheses
   |
17 |             key_expr: sample.key_expr().to_string(),
   |                                      ++

error[E0609]: no field `value` on type `Sample`
  --> src/sample.rs:18:61
   |
18 |             value: crate::value::ExValue::from(env, &sample.value),
   |                                                             ^^^^^ unknown field

error[E0616]: field `kind` of struct `Sample` is private
  --> src/sample.rs:19:26
   |
19 |             kind: sample.kind.into(),
   |                          ^^^^ private field
   |
help: a method `kind` also exists, call it with parentheses
   |
19 |             kind: sample.kind().into(),
   |                              ++

error[E0277]: the trait bound `ZBytes: From<i64>` is not satisfied
  --> src/sample.rs:38:17
   |
38 |                 zenoh::bytes::ZBytes::from(sample.value.decode::<i64>().unwrap())
   |                 ^^^^^^^^^^^^^^^^^^^^ the trait `From<i64>` is not implemented for `ZBytes`
   |
   = help: the following other types implement trait `From<T>`:
             `ZBytes` implements `From<&Cow<'_, [u8]>>`
             `ZBytes` implements `From<&Cow<'_, str>>`
             `ZBytes` implements `From<&String>`
             `ZBytes` implements `From<&Vec<u8>>`
             `ZBytes` implements `From<&[u8; N]>`
             `ZBytes` implements `From<&[u8]>`
             `ZBytes` implements `From<&str>`
             `ZBytes` implements `From<AttachmentType<ID>>`
           and 8 others

error[E0277]: the trait bound `ZBytes: From<f64>` is not satisfied
  --> src/sample.rs:41:17
   |
41 |                 zenoh::bytes::ZBytes::from(sample.value.decode::<f64>().unwrap())
   |                 ^^^^^^^^^^^^^^^^^^^^ the trait `From<f64>` is not implemented for `ZBytes`
   |
   = help: the following other types implement trait `From<T>`:
             `ZBytes` implements `From<&Cow<'_, [u8]>>`
             `ZBytes` implements `From<&Cow<'_, str>>`
             `ZBytes` implements `From<&String>`
             `ZBytes` implements `From<&Vec<u8>>`
             `ZBytes` implements `From<&[u8; N]>`
             `ZBytes` implements `From<&[u8]>`
             `ZBytes` implements `From<&str>`
             `ZBytes` implements `From<AttachmentType<ID>>`
           and 8 others

error[E0599]: no function or associated item named `new` found for struct `Sample` in the current scope
  --> src/sample.rs:49:32
   |
49 |         zenoh::sample::Sample::new(key_expr, value)
   |                                ^^^ function or associated item not found in `Sample`

error[E0308]: mismatched types
  --> src/session.rs:33:68
   |
33 |         Ok(subscriber) => Ok(ResourceArc::new(crate::SubscriberRef(subscriber))),
   |                                               -------------------- ^^^^^^^^^^ expected `Subscriber<Receiver<Sample>>`, found `Subscriber<FifoChannelHandler<...>>`
   |                                               |
   |                                               arguments to this struct are incorrect
   |
   = note: expected struct `Subscriber<flume::Receiver<Sample>>`
              found struct `Subscriber<FifoChannelHandler<Sample>>`
note: tuple struct defined here
  --> src/lib.rs:29:8
   |
29 | struct SubscriberRef(Subscriber<Receiver<Sample>>);
   |        ^^^^^^^^^^^^^

error[E0308]: mismatched types
  --> src/session.rs:50:66
   |
50 |         Ok(queryable) => Ok(ResourceArc::new(crate::QueryableRef(queryable))),
   |                                              ------------------- ^^^^^^^^^ expected `Queryable<Receiver<Query>>`, found `Queryable<FifoChannelHandler<...>>`
   |                                              |
   |                                              arguments to this struct are incorrect
   |
   = note: expected struct `Queryable<flume::Receiver<zenoh::query::Query>>`
              found struct `Queryable<FifoChannelHandler<zenoh::query::Query>>`
note: tuple struct defined here
  --> src/lib.rs:30:8
   |
30 | struct QueryableRef(Queryable<Receiver<Query>>);
   |        ^^^^^^^^^^^^

error[E0277]: the trait bound `ZBytes: From<i64>` is not satisfied
  --> src/session.rs:62:47
   |
62 |     session_put_impl(env, resource, key_expr, value)
   |     ----------------                          ^^^^^ the trait `From<i64>` is not implemented for `ZBytes`, which is required by `i64: Into<ZBytes>`
   |     |
   |     required by a bound introduced by this call
   |
   = help: the following other types implement trait `From<T>`:
             `ZBytes` implements `From<&Cow<'_, [u8]>>`
             `ZBytes` implements `From<&Cow<'_, str>>`
             `ZBytes` implements `From<&String>`
             `ZBytes` implements `From<&Vec<u8>>`
             `ZBytes` implements `From<&[u8; N]>`
             `ZBytes` implements `From<&[u8]>`
             `ZBytes` implements `From<&str>`
             `ZBytes` implements `From<AttachmentType<ID>>`
           and 8 others
   = note: required for `i64` to implement `Into<ZBytes>`
note: required by a bound in `session_put_impl`
  --> src/session.rs:85:24
   |
85 | fn session_put_impl<T: Into<zenoh::bytes::ZBytes>>(
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `session_put_impl`

error[E0277]: the trait bound `ZBytes: From<f64>` is not satisfied
  --> src/session.rs:72:47
   |
72 |     session_put_impl(env, resource, key_expr, value)
   |     ----------------                          ^^^^^ the trait `From<f64>` is not implemented for `ZBytes`, which is required by `f64: Into<ZBytes>`
   |     |
   |     required by a bound introduced by this call
   |
   = help: the following other types implement trait `From<T>`:
             `ZBytes` implements `From<&Cow<'_, [u8]>>`
             `ZBytes` implements `From<&Cow<'_, str>>`
             `ZBytes` implements `From<&String>`
             `ZBytes` implements `From<&Vec<u8>>`
             `ZBytes` implements `From<&[u8; N]>`
             `ZBytes` implements `From<&[u8]>`
             `ZBytes` implements `From<&str>`
             `ZBytes` implements `From<AttachmentType<ID>>`
           and 8 others
   = note: required for `f64` to implement `Into<ZBytes>`
note: required by a bound in `session_put_impl`
  --> src/session.rs:85:24
   |
85 | fn session_put_impl<T: Into<zenoh::bytes::ZBytes>>(
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `session_put_impl`

error[E0433]: failed to resolve: use of undeclared type `Value`
  --> src/session.rs:82:47
   |
82 |     session_put_impl(env, resource, key_expr, Value::from(value.as_slice()))
   |                                               ^^^^^ use of undeclared type `Value`

error[E0308]: mismatched types
   --> src/session.rs:114:69
    |
114 |         Ok(receiver) => Ok(ResourceArc::new(crate::ReplyReceiverRef(receiver))),
    |                                             ----------------------- ^^^^^^^^ expected `Receiver<Reply>`, found `FifoChannelHandler<Reply>`
    |                                             |
    |                                             arguments to this struct are incorrect
    |
    = note: expected struct `flume::Receiver<zenoh::query::Reply>`
               found struct `FifoChannelHandler<zenoh::query::Reply>`
note: tuple struct defined here
   --> src/lib.rs:31:8
    |
31  | struct ReplyReceiverRef(Receiver<Reply>);
    |        ^^^^^^^^^^^^^^^^

error[E0609]: no field `sample` on type `zenoh::query::Reply`
   --> src/session.rs:127:34
    |
127 |         Ok(reply) => match reply.sample {
    |                                  ^^^^^^ unknown field

error[E0107]: struct takes 0 lifetime arguments but 1 lifetime argument was supplied
   --> src/subscriber.rs:13:22
    |
13  |     let subscriber: &Subscriber<'_, Receiver<Sample>> = &resource.0;
    |                      ^^^^^^^^^^ -- help: remove the lifetime argument
    |                      |
    |                      expected 0 lifetime arguments
    |
note: struct defined here, with 0 lifetime parameters
   --> /Users/takasehideki/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zenoh-1.0.0/src/api/subscriber.rs:142:12
    |
142 | pub struct Subscriber<Handler> {
    |            ^^^^^^^^^^

error[E0599]: no method named `into_arc` found for struct `Session` in the current scope
  --> src/lib.rs:47:63
   |
47 |         Ok(session) => Ok(ResourceArc::new(SessionRef(session.into_arc()))),
   |                                                               ^^^^^^^^
   |
help: there is a method `into` with a similar name
   |
47 |         Ok(session) => Ok(ResourceArc::new(SessionRef(session.into()))),
   |                                                               ~~~~

warning: unused variable: `env`
  --> src/value.rs:10:28
   |
10 |     pub(crate) fn from<'a>(env: Env<'a>, value: &zenoh::sample::Sample) -> Term<'a> {
   |                            ^^^ help: if this is intentional, prefix it with an underscore: `_env`
   |
   = note: `#[warn(unused_variables)]` on by default

Some errors have detailed explanations: E0061, E0107, E0277, E0308, E0433, E0599, E0609, E0616.
For more information about an error, try `rustc --explain E0061`.
warning: `zenohex_nif` (lib) generated 1 warning
error: could not compile `zenohex_nif` (lib) due to 24 previous errors; 1 warning emitted

== Compilation error in file lib/zenohex/nif.ex ==
** (RuntimeError) Rust NIF compile error (rustc exit code 101)
    (rustler 0.34.0) lib/rustler/compiler.ex:36: Rustler.Compiler.compile_crate/3
    lib/zenohex/nif.ex:8: (module)
